{"version":3,"sources":["App.js","actions/index.js","reportWebVitals.js","reducers/updown.js","reducers/index.js","store.js","index.js"],"names":["App","changeTheNumber","useSelector","state","dispatch","useDispatch","className","class","title","onClick","type","name","value","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","reducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAoCeA,EA7BH,WAGV,IAAMC,EAAkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,mBAE7CG,EAAWC,cAEjB,OACE,mCACE,qBAAKC,UAAU,WAAf,SAGA,sBAAKC,MAAM,YAAX,UAEA,6DACA,uDAEA,sBAAKA,MAAM,WAAX,UACE,mBAAGA,MAAM,kBAAkBC,MAAM,YAAYC,QAAS,kBAAML,ECVzD,CACHM,KAAM,eDSN,SAAmF,uCACnF,uBAAOC,KAAK,WAAWD,KAAK,OAAOH,MAAM,kBAAkBK,MAAOX,IAClE,mBAAGM,MAAM,iBAAiBC,MAAM,YAAYC,QAAS,kBAAML,ECnBxD,CACHM,KAAM,YACNG,QDiB8E,KAA9E,SAAmF,kDEf5EC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCGCd,EARS,WAAmC,IAAlCE,EAAiC,uDAFrC,EAE0BoB,EAAW,uCACtD,OAAQA,EAAOb,MACX,IAAK,YAAa,OAAOP,EAAQoB,EAAOV,QACxC,IAAK,YAAa,OAAOV,EAAQ,EACjC,QAAS,OAAOA,ICKTqB,EAPEC,YACb,CAEIxB,oBCFOyB,EAFDC,YAAYH,EAAUI,OAAOC,8BAAgCD,OAAOC,gCCMlFH,EAAMI,WAAU,kBAAMC,QAAQC,IAAIN,EAAMO,eAExCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SAM1BxB,M","file":"static/js/main.b1688238.chunk.js","sourcesContent":["import React from 'react'\nimport \"./App.css\";\nimport {incNumber} from \"./actions\";\nimport {decNumber} from \"./actions\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst App = () => {\n\n  // it alternative to the useContext hooks in react / consumer from context API\n  const changeTheNumber = useSelector(state => state.changeTheNumber);\n  \n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className=\"main-div\">\n      \n\n      <div class=\"container\">\n  \n      <h1>Increment/Decrement counter</h1>\n      <h4>using React and Redux</h4>\n      \n      <div class=\"quantity\">\n        <a class=\"quantity__minus\" title=\"Decrement\" onClick={() => dispatch(decNumber())}><span>-</span></a>\n        <input name=\"quantity\" type=\"text\" class=\"quantity__input\" value={changeTheNumber} />\n        <a class=\"quantity__plus\" title=\"Increment\" onClick={() => dispatch(incNumber(5))}><span>+</span></a>\n      </div>\n  \n          </div>\n        </div>\n    </>\n  )\n}\n\nexport default App\n","// export const incNumber = () => {\n//     return {\n//         type: 'INCREMENT',\n//         payload: 2\n//     }\n// };\n\nexport const incNumber = (num) => {\n    return {\n        type: 'INCREMENT',\n        payload: num\n    }\n}\n\nexport const decNumber = () => {\n    return {\n        type: 'DECREMENT'\n    }\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = 0;\n\nconst changeTheNumber = (state = initialState, action) => {\n    switch (action.type) {\n        case \"INCREMENT\": return state + action.payload;\n        case \"DECREMENT\": return state - 1;\n        default: return state;\n    }\n}\n\nexport default changeTheNumber;","import changeTheNumber from \"./updown\";\n\nimport { combineReducers } from \"redux\";\n\nconst reducers = combineReducers(\n    {\n    //   myNumber:changeTheNumber\n        changeTheNumber\n    }\n);\n\nexport default reducers;","import { createStore } from \"redux\";\nimport reducers  from \"./reducers/index\";\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n\n// subscribe(listener)\n\n// Adds a change listener. It will be called any time an action is dispatched, and some part of the state tree may potentially have changed. You may then call getState() to read the current state tree inside the callback.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\n\nstore.subscribe(() => console.log(store.getState()));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}